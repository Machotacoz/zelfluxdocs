{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.1",
    "title": "ZelFlux",
    "contact": {
      "email": "tadeas.kmenta@zel.cash"
    },
    "license": {
      "name": "GNU AGPLv3",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "x-logo": {
      "url": "https://raw.githubusercontent.com/zelcash/zelflux/master/ZelFront/src/assets/img/ZelNodes.svg"
    },
    "description": "This is an API documentation of calls available to be made to any ZelFlux\nZelFlux is completely open source and we encourage everyone to feel free and contribute :)\n# Introduction\nZelFlux posseses with 4 tier hiearchy level API. \n* Public API level - available without any permission, does not require signing\n* User API level - user level permission, requires signing\n* ZelTeam API level - ZelTeam level permission (an appointed Zel Team member has access to those API calls), requires signing\n* Admin API level - Admin level permission, requires signing. ZelNode owner.\n\nMost calls are available via GET request with some that may require large amount of data via POST request. \nWebsocket is currently used only for simplifying login operations and for internal ZelFlux communication\n"
  },
  "externalDocs": {
    "description": "ZelFlux",
    "url": "https://github.com/zelcash/zelflux"
  },
  "tags": [
    {
      "name": "ZelFlux",
      "description": "Calls that interact with ZelFlux network"
    },
    {
      "name": "ZelID",
      "description": "Calls that interact with ZelID and login/authentication management of ZelFlux"
    },
    {
      "name": "ZelCash",
      "description": "Calls that interact with locally running ZelCash daemon"
    },
    {
      "name": "ZelNode",
      "description": "Calls that interact with local ZelNode and its network"
    }
  ],
  "servers": [
    {
      "url": "http://157.230.249.150:161267"
    },
    {
      "url": "http://94.177.240.7:16127"
    },
    {
      "url": "http://89.40.115.8:16127"
    },
    {
      "url": "http://94.177.241.10:16127"
    },
    {
      "url": "http://54.37.234.130:16127"
    },
    {
      "url": "http://194.182.83.182:16127"
    }
  ],
  "paths": {
    "/users/{username}": {
      "parameters": [
        {
          "name": "pretty_print",
          "in": "query",
          "description": "Pretty print response",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "Some description of the operation. \nYou can use `markdown` here.\n",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_email",
            "in": "query",
            "description": "Filter users without email",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "main_auth": [
              "read:users"
            ]
          },
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "username": "user1",
                  "email": "user@example.com"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "main_auth": [
              "write:users"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        }
      }
    },
    "/echo": {
      "post": {
        "tags": [
          "Echo"
        ],
        "summary": "Echo test",
        "description": "Receive the exact message you've sent",
        "operationId": "echo",
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "$ref": "#/components/headers/ExpiresAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "Hello world!"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            }
          },
          "description": "Echo payload",
          "required": true
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "API.v1.Echo echo = new API.v1.Echo();\necho.message = \"Hello World!\");\nEchoResponse response = echo.post();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Success\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$form = new \\API\\Entities\\Echo();\n$form->setMessage(\"Hello World!\");\ntry {\n    $pet = $client->echo()->post($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User supplied username",
            "type": "string",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "securitySchemes": {
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
